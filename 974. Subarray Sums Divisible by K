//974. Subarray Sums Divisible by K
class Solution {
    public int solve1(int[] nums, int k){
         int n=nums.length;
        // int [] sum=new int[n];
        // sum[0] =nums[0];
        // for(int i=1;i<n;i++){
        //         sum[i] = sum[i-1] + nums[i];
        // }
        int ans=0;
        for(int i=0;i<n;i++){
            int sum=0;
            for(int j=i;j<n;j++){
                //int sub_sum= sum[j] - sum[i] + nums[i];
                sum+= nums[j];
                if(sum%k==0){
                    ans++;
                }
            }
        }

        return ans;
    }

    public int solution2(int[] nums, int k){
         
        HashMap<Integer,Integer> map=new HashMap<>();
        map.put(0,1);
        int prefix_sum=0;
        int count=0;
        for(int i=0; i<nums.length; i++){
            prefix_sum+=nums[i];
            int rem=prefix_sum % k;
            if(rem<0){
                rem=(rem+k);
            }
            if(map.containsKey(rem)){
                count+=map.get(rem);
                map.put(rem,map.get(rem)+1);
            }else{
                map.put(rem,1);
            }

        }
        return count;
    }
    public int solution2Repeate(int[] nums, int k){
        HashMap<Integer,Integer> rem = new HashMap<>();
        int sum=0;
        int ans=0;
        rem.put(0,1);
        for(int i=0;i<nums.length;i++){
            sum+=nums[i];

            int r = sum%k;
            if(r<0)r += k ;

            if(rem.containsKey(r)){
                ans+=rem.get(r);
            }
            rem.put(r, rem.getOrDefault(r,0)+1);
        }
        return ans;
    }
    public int subarraysDivByK(int[] nums, int k) {
       //return solve1(nums, k);

       //return solution2(nums, k);ep

       return solution2Repeate(nums, k);

    }
}
